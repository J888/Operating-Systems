Project2a - Psuedocode for myShell

John Hyland
CIS 3207 - Fall 2017

Language: C++
Description: blueprint of a basic shell implementation

-----------------------------------------

myshell.cpp
Purpose: the main shell loop


main(int argc, char *argv[])
{

	if(2 args passed to ./myshell)
	{
		take input from a batchfile;
	}

	else
	{
		cout << "myshell>";
		string entered = get line from stdin;
		parse_line(entered);

		if("exit" was entered)
		{
			exit;
		}

	}
}


-----------------------------------------

eval.h
Purpose: contains all functions that parse the input string and decide how to execute


stringarray parse_line(string s)
{
	for (0 < length of s)
	{
		if(s[i] is a "space" char)
			skip it;
		if(sequence of non-space chars)
			store as separate string;
	}

	return the list/array of separate strings;
}





evaluate_args(stringarray arr)
{

	if(arr[i] == '|')
	{
		make_pipe();
	}

	if(arr[i] == '<')
	{
		//send file as program input
		io_redirect();
	}

	if(arr[i] == '>')
	{
		//send output of program to file
		io_redirect();
	}

	if(arr[last index] == '&')
	{
		run program in the background;
	}
	
}


is_builtin()
{
	if(the the cmd is a builtin)
		return true;
	else
		return false;
}


-----------------------------------------

builtins.h
Purpose: defines all builtin functions

my_cd()
{
	chdir(path);	
}


my_clr()
{
	print 100 newlines;
}


my_dir()
{
	declare an array of size MAXPATHLEN;

	getcwd(array, MAXPATHLEN);

	string = array;

	print string;

}


my_environ()
{
	extern char ** environ;
	for(all environs)
	{
		print each on new line;
	}
}


my_echo()
{
	print everything after the echo command;
	(everything separated by spaces)
}

my_help()
{
	print the 'help' manual, readme.txt;
}


my_quit()
{
	exit the shell program;
}




--------------------------------------------
forks.h
Purpose: defines all functions for fork-ing and exec-ing


int my_fork(command and arguments)
{

	declare a pid_t pid;

	pid = fork();

	if(pid is < 0)
	{
		error message;
		exit;
	} 

	else if(pid is 0)
	{
		execute command with arguments;
		exit;
	}

	else
	{

		wait for child to finish and exit;
		exit back to shell;
	}

	
}




background_fork()
{
	
}


--------------------------------------------
pipe.h
Purpose: a function to fork and pipe


make_pipe()
{
	



}


--------------------------------------------

io_redirect.h
Purpose: a function to redirect stdout of a program


io_redirect(integer redirect)
{


	//rediret INPUT
	if(redirect == 0)
	{
		int fd = open the file

		dup2(fd, 0);

		my_execute(program);

		close the file;
	}


	//redirect OUTPUT
	if(redirect == 0)
	{
		//redirect input
		int fd = open the output

		dup2(fd, 0);

		my_execute(program);

		close the file;
	}

	
}