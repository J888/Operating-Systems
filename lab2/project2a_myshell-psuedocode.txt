Project2a - Psuedocode for myShell

John Hyland
CIS 3207 - Fall 2017

Language: C++
Description: blueprint of a basic shell implementation

-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
myshell.cpp
Purpose: the main shell loop


#include <iostream>
#include <vector>
//also include all project header files

main(int argc, char *argv[])
{

	if(2 args passed to ./myshell)
	{
		take input from a batchfile;
	}

	else //run shell as usual
	{
		cout << "myshell>";
		string entered = get line from stdin;
		
		vector<string> arg_vector = parse_line(entered);

		evaluate_args(arg_vector);

		if("exit" or "quit" was entered)
		{
			exit the shell;
		}

	}
}





-----------------------------------------
evaluater.h
Purpose: defines functions for string parsing and deciding how to execute commands/args


vector<string> parse_line(string s)
{
	for (0 < length of s)
	{
		if(s[i] is a "space" char)
			skip it;
		if(sequence of non-space chars)
			store as separate string;
	}

	return the list/array of separate strings;
}




void evaluate_args(vector<string> s)
{
	int shouldwait = 1;

	if(s[last index] == '&')
	{
		s.pop_back(); //get rid of the '&'

		shouldwait = 0;
	}



	int x = 0; // flag to know when '<' or '>' or '|' found

	for(int k = 0; k < s.length; k++)
	{

		if(s[i] == '|')
		{
			split s into 2 cmd vectors;

			fork_and_pipe(cmd1, cmd2, shouldwait);

			x = 1;

			break;
			
		}

		else if(s[i] == '<')
		{
			split s into cmd and file;

			//send file as program input
			io_redirect(cmd, file, 0);

			x = 1;

			break;
		}

		else if(s[i] == '>')
		{
			split s into cmd and file;

			//send output of program to file
			io_redirect(cmd, file, 1);

			x = 1;

			break;
		}

	}

	if(!x)
	{
		my_fork(s, shouldwait)
	}





	
}




int is_builtin(vector<string> s)
{
	if(first element in s is a builtin)
		return 1;
	else
		return 0;
}






-----------------------------------------
builtins.h
Purpose: defines all builtin functions

void my_cd()
{
	chdir(path);	
}


void my_clr()
{
	print 100 newlines;
}


void my_dir()
{
	declare an array of size MAXPATHLEN;

	getcwd(array, MAXPATHLEN);

	string curr_dir = array;

	print curr_dir;

}


void my_environ()
{
	extern char ** environ;

	for(all environs)
	{
		print each environment variable on new line;
	}
}


void my_echo()
{
	print what came after 'echo';
}


void my_help()
{
	print the 'help' user manual (readme.txt);
	//readme.txt will describe the commands and how to use the shell
}






--------------------------------------------
forker.h
Purpose: defines all functions for fork-ing and exec-ing


void my_fork(command and arguments, int shouldwait)
{

	pid_t pid;

	if( (pid = fork()) returns < 0) //ERROR
	{
		error message;
		exit;
	} 

	else if(pid returns 0) // CHILD
	{
		execute the command and give it any specified arguments;
		exit;
	}

	else // PARENT
	{
		if(shouldwait)
		{
			wait for child to finish and exit;
		}

		//here go back to main shell prompt;
	}

	
}






--------------------------------------------
piper.h
Purpose: defines a function to pipe between 2 processes


#include <unistd.h>
#include <fcntl.h>

void fork_and_pipe(vector<string> program1, vector<string> program2,  int shouldwait)
{
	
	int fd[2];

	make pipe with pipe(fd);

	FIRST fork,  pid = fork();

	if (error)
	{
		output error message and exit;
	}

	else if (this is child 1)
	{

		
		SECOND fork, pid2 = fork();

		//again check for error

		if(this is child 2)
		{

			close(write end of pipe);
			dup2(read end);
			execute PROGRAM #1;

		}

		else // in parent 2
		{

			close(read end of pipe);
			dup2(write end);
			execute PROGRAM #2 with dup'd stdin that is really the stdout of PROGRAM # 1

		}


	}

	else // in parent 1
	{
		if(shouldwait)
		{
			wait(NULL); // wait for the 2 processes to finish
		}

		//here go back to main shell prompt
	}


}






--------------------------------------------
io_redirect.h
Purpose: defines a function to redirect stdout of a program


void io_redirect(vector<string> cmds, string file, integer redirect_to, int shouldwait)
{

	//rediret INPUT
	if(redirect == 0)
	{
		int fd = open the file;

		dup2(fd, 0);

		my_fork(cmd and stdin used as args, shouldwait);

		close the file;

	}


	//redirect OUTPUT
	if(redirect == 1)
	{
		//redirect input
		int fd = open the output;

		dup2(fd, 1);

		my_fork(cmds, shouldwait);

		write stdout to file;
		close the file;
	}

	//redirect OUTPUT APPEND
	if(redirect == 2)
	{
		//redirect input
		int fd = open the output;

		dup2(fd, 1);

		my_fork(cmds, shouldwait);

		write stdout to file, in append mode;
		close the file;
	}
	

}

